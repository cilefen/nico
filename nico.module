<?php

/**
 * @file
 * The nico module file.
 */

/**
 * Implements hook_permission().
 */
function nico_permission() {
  return array(
    'administer nico' => array(
      'title' => t('Administer nico'),
      'description' => t('Perform administration tasks for the nico module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nico_menu() {
  return array(
    'blog/%' => array(
      'title' => 'Blog',
      'page callback' => 'nico_view_blog',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
    ),
    'blogs' => array(
      'title' => 'Blogs',
      'page callback' => 'nico_view_blogs',
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function nico_entity_info() {
  return array(
    'nico_blog' => array(
      'label' => t('Blog Entry'),
      'plural label' => t('Blog Entries'),
      'entity class' => 'NicoBlogEntity',
      'controller class' => 'EntityAPIController',
      'base table' => 'nico_blog',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'nico',
      'access callback' => 'nico_admin_access',
      'admin ui' => array(
        'path' => 'admin/structure/nico',
        'file' => 'nico.admin.inc',
        'controller class' => 'EntityDefaultUIController',
      ),
      'bundles' => array(
        'nico_blog' => array(
          'label' => t('Blog'),
          'admin' => array(
            'path' => 'admin/structure/nico',
          ),
        ),
      ),
    ),
  );
}

/**
 * Access callback for the entity API.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param string $profile
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param string $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function nico_admin_access($op, $profile = NULL, $account = NULL) {
  if ($op == 'view') {
    return user_access('access content', $account);
  }
  return user_access('administer nico', $account);
}

/**
 * Callback for blog/{id}.
 */
function nico_view_blog($id) {
  $blogs = entity_load('nico_blog', array($id));
  $blog = $blogs[$id];
  drupal_set_title($blog->title);
  $render = entity_view('nico_blog', array($blog));
  return $render;
}

/**
 * Callback for blogs.
 */
function nico_view_blogs() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'nico_blog')->pager(10);
  $results = $query->execute();
  $nico_blogs = array();
  if (isset($results['nico_blog'])) {
    $nico_blog_nids = array_keys($results['nico_blog']);
    $nico_blogs = entity_load('nico_blog', $nico_blog_nids);
  }
  $render = array(
    'entries' => entity_view('nico_blog', $nico_blogs),
    'pager' => array(
      '#markup' => theme('pager'),
      '#weight' => 10
    )
  );
  return $render;
}

/**
 * Class defining nico blogs, for the Entity API.
 */
class NicoBlogEntity extends Entity {

  /**
   * {@inheritdoc}
   */
  protected function defaultUri() {
    return array('path' => 'blog/' . $this->identifier());
  }

  /**
   * {@inheritdoc}
   */
  protected function defaultLabel() {
    return isset($this->title) ? $this->title : '';
  }

}

/**
 * Adds a body field to the nico entity.
 *
 * Modified from node_add_body_field().
 *
 * @todo As an internal function, this probably doesn't need to return anything.
 *
 * @return array
 *   The body field instance.
 */
function _nico_add_body_field() {
  $field = field_info_field('nico_body');
  if (empty($field)) {
    $field = array(
      'field_name' => 'nico_body',
      'type' => 'text_with_summary',
      'entity_types' => array('nico_blog'),
    );
    field_create_field($field);
  }
  $instance = field_info_instance('nico_blog', 'nico_body', 'nico_blog');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'nico_body',
      'entity_type' => 'nico_blog',
      'bundle' => 'nico_blog',
      'label' => 'Body',
      'widget' => array('type' => 'text_textarea_with_summary'),
      'settings' => array('display_summary' => TRUE),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
        ),
      ),
    );
    field_create_instance($instance);
  }

  return $instance;
}
